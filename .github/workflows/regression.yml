name: Regression Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      redis:
        # Docker Hub image
        image: redis:6-alpine
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      PACKAGE_VERSION: 1.3.8rc3
      PROFTPD_MODULES: mod_sql:mod_sql_mysql:mod_sql_odbc:mod_sql_postgres:mod_sql_sqlite:mod_sql_passwd:mod_sftp:mod_sftp_sql:mod_sftp_pam:mod_tls:mod_tls_fscache:mod_tls_shmcache:mod_tls_memcache:mod_tls_redis:mod_ban:mod_copy:mod_ctrls_admin:mod_deflate:mod_dnsbl:mod_dynmasq:mod_exec:mod_facl:mod_geoip:mod_ifversion:mod_ldap:mod_load:mod_log_forensic:mod_qos:mod_quotatab:mod_quotatab_file:mod_quotatab_ldap:mod_quotatab_radius:mod_quotatab_sql:mod_radius:mod_readme:mod_rewrite:mod_shaper:mod_site_misc:mod_snmp:mod_wrap:mod_wrap2:mod_wrap2_file:mod_wrap2_redis:mod_wrap2_sql:mod_digest:mod_auth_otp:mod_statcache:mod_unique_id:mod_ifsession
      REDIS_HOST: redis

    strategy:
      matrix:
        compiler:
          - gcc
        container:
          - ubuntu:18.04

    container: ${{ matrix.container }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Ubuntu packages
        if: ${{ matrix.container == 'ubuntu:18.04' }}
        run: |
          # Need to add other repos for e.g. libsodium
          apt-get update -qq
          # for builds
          apt-get install -y gcc git make
          # for mod_lang
          apt-get install -y gettext locales-all
          # for xattr support
          apt-get install -y libattr1-dev
          # for mod_cap
          apt-get install -y libcap-dev
          # for mod_geoip
          apt-get install -y libgeoip-dev
          # for mod_ldap
          apt-get install -y libldap2-dev libsasl2-dev
          # for mod_ldap runtime support for SCRAM
          apt-get install -y libsasl2-modules-gssapi-mit
          # for mod_rewrite
          apt-get install -y libidn2-dev
          # for memcache support
          apt-get install -y libmemcached-dev
          # for redis support
          apt-get install -y libhiredis-dev
          # for mod_sql_mysql
          apt-get install -y libmysqlclient-dev
          # for PAM support
          apt-get install -y libpam-dev
          # for mod_sql_postgres
          apt-get install -y libpq-dev
          # for mod_sql_odbc
          apt-get install -y unixodbc-dev
          # for OpenSSL support
          apt-get install -y libssl-dev
          # for Sodium support
          apt-get install -y --force-yes libsodium-dev
          # for mod_sql_sqlite
          apt-get install -y libsqlite3-dev sqlite3
          # for mod_wrap
          apt-get install -y libwrap0-dev
          # for PCRE2 support
          apt-get install -y libpcre2-dev libpcre2-posix0
          # for ftptop
          apt-get install -y ncurses-dev
          # for zlib support
          apt-get install -y zlib1g-dev

          # for logging
          apt-get install -y rsyslog
          service rsyslog start

          # for integration/regression tests
          apt-get install -y \
            libcompress-raw-zlib-perl \
            libdata-dumper-simple-perl \
            libdatetime-perl \
            libfile-copy-recursive-perl \
            libfile-path-tiny-perl \
            libfile-spec-native-perl \
            libjson-perl \
            libnet-address-ip-local-perl \
            libnet-ssh2-perl \
            libnet-ssleay-perl \
            libnet-telnet-perl \
            libposix-2008-perl \
            libredis-perl \
            libtest-unit-perl \
            libtime-hr-perl \
            libwww-perl
          PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'install Net::FTPSSL'
          apt-get install -y openssh-client

          # for debugging
          gcc --version
          openssl version -a

      - name: Install with static modules
        env:
          CC: ${{ matrix.compiler }}
        run: |
          # NOTE: Docker does not have good IPv6 support, hence we disable it.
          # ./configure LIBS="-lodbc" --enable-ctrls --enable-facl --disable-ipv6 --enable-memcache --enable-nls --enable-pcre2 --enable-redis --with-modules="${{ env.PROFTPD_MODULES }}"
          ./configure LIBS="-lodbc" --enable-ctrls --enable-facl --disable-ipv6 --enable-memcache --enable-nls --enable-pcre2 --enable-redis
          make
          make install

      - name: Run regression tests
        env:
          PROFTPD_TEST_BIN: /usr/local/sbin/proftpd
          PROFTPD_TEST_DIR: ${{ github.workspace }}/proftpd
        run: |
          cd tests
          # perl tests.pl
          perl -I $PROFTPD_TEST_DIR/t/lib t/commands/abor.t t/config/deleteabortedstores.t t/config/logoptions.t t/config/rlimitchroot.t
